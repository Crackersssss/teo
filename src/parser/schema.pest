schema = {
    SOI
    ~ (config_declaration | enum_declaration | model_declaration | EMPTY_LINES | CATCH_ALL)*
    ~ EOI
}

// #############
// constants
// #############
WHITESPACE = _{ SPACE_SEPARATOR | "\t" }
EMPTY_LINES = @{ (WHITESPACE* ~ NEWLINE)+ }
BLOCK_OPEN = { "{" ~ (!NEWLINE ~ ANY)* ~ NEWLINE }
BLOCK_CLOSE = { "}" }
ENUM_KEYWORD = { "enum" }
MODEL_KEYWORD = { "model" }
CONFIG_KEYWORD = { "config" }
CONNECTOR_KEYWORD = { "connector" }
CLIENT_KEYWORD = { "client" }
GENERATOR_KEYWORD = { "generator" }
IMPORT_KEYWORD = { "import" }
FROM_KEYWORD = { "from" }
COLON = { ":" }
TRAILING_COMMA = @{ "," }
RANGE_OPEN = { ".." }
RANGE_CLOSE = { "..." }
CATCH_ALL = { (!NEWLINE ~ ANY)+ ~ NEWLINE? }
BLOCK_LEVEL_CATCH_ALL = { !BLOCK_CLOSE ~ CATCH_ALL }

// #############
// import
// #############

import_statement = {
    IMPORT_KEYWORD
    ~ (identifier_list ~ FROM_KEYWORD)?
    ~ string_literal
}

// #############
// config blocks
// #############

config_keywords = { CONFIG_KEYWORD | CONNECTOR_KEYWORD | CLIENT_KEYWORD | GENERATOR_KEYWORD }

config_declaration = {
    config_keywords
    ~ identifier?
    ~ BLOCK_OPEN
    ~ (config_item | comment_block | EMPTY_LINES)*
    ~ BLOCK_CLOSE
}

config_item = {
    identifier ~ expression
}

// #############
// enum
// #############
enum_declaration = {
    ENUM_KEYWORD
    ~ identifier
    ~ BLOCK_OPEN
    ~ (enum_value_declaration | (block_decorator ~ NEWLINE) | comment_block | EMPTY_LINES | BLOCK_LEVEL_CATCH_ALL)*
    ~ BLOCK_CLOSE
}

enum_value_declaration = { item_decorator* ~ identifier ~ trailing_comment? ~ NEWLINE }

enum_choice = @{ "." ~ identifier }

// #############
// model
// #############
model_declaration = {
    (item_decorator ~ (NEWLINE | WHITESPACE)*)*
    ~ MODEL_KEYWORD
    ~ identifier
    ~ BLOCK_OPEN
    ~ (field_declaration | (block_decorator ~ NEWLINE) | comment_block | EMPTY_LINES | BLOCK_LEVEL_CATCH_ALL)*
    ~ BLOCK_CLOSE
}

// #############
// field
// #############
field_declaration = {
    (item_decorator ~ (NEWLINE | WHITESPACE)*)*
    ~ identifier
    ~ COLON
    ~ field_type
    ~ trailing_comment?
    ~ NEWLINE
}

// #############
// identifier & path
// #############
identifier = @{ ASCII_ALPHANUMERIC ~ ( "_" | "-" | ASCII_ALPHANUMERIC)* }
path = { identifier ~ ("." ~ path?)* }
identifier_list = { BLOCK_OPEN ~ (identifier ~ ("," ~ identifier)*)? ~ TRAILING_COMMA? ~ BLOCK_CLOSE }

// #############
// function call, decorator and pipeline
// #############
call = { path ~ arguments_list }
item_decorator = { "@" ~ path ~ arguments_list? }
block_decorator = { "@@" ~ path ~ arguments_list? }
pipeline = { "$" ~ path ~ arguments_list? }

// #############
// arguments
// #############
arguments_list = { "(" ~ (argument ~ ("," ~ argument)*)? ~ TRAILING_COMMA? ~ ")" }
argument = _{ named_argument | empty_argument | expression }
empty_argument = { identifier ~ ":" }
named_argument = { identifier ~ ":" ~ expression }

// #############
// type
// #############
field_type = { identifier ~ arity? ~ optionality? }
arity = {"[]" | "{}" }
optionality = { "?" }

// #############
// numeric literals
// #############
numeric_literal = @{ ("-")? ~ ASCII_DIGIT+ ~ ("." ~ ASCII_DIGIT+)? }

// #############
// string literals
// #############
ASCII_CONTROL_CHARACTER = _{ '\u{0000}'..'\u{001F}' }
string_escape = _{ "\\" ~ ANY }
string_content = @{ (string_escape | !("\"" | ASCII_CONTROL_CHARACTER) ~ ANY)* }
string_literal = ${ "\"" ~ string_content ~ "\"" }

// #############
// bool literals
// #############
bool_literal = @{ "true" | "false" }

// #############
// null literals
// #############
null_literal = { "null" }

// #############
// range literals
// #############
range_literal = { expression ~ (RANGE_OPEN | RANGE_CLOSE)  ~ expression }

// #############
// tuple literals
// #############
tuple_literal = { "(" ~ (expression ~ ( "," ~ expression )*)? ~ ")" }

// #############
// array literals
// #############
array_literal = { "[" ~ (expression ~ ( "," ~ expression )*)? ~ "]" }

// #############
// dict literals
// #############
dictionary_literal = { BLOCK_OPEN ~ (expression ~ ( "," ~ expression )*)? ~ BLOCK_CLOSE }

// #############
// comments
// #############
doc_content = @{ (!NEWLINE ~ ANY)* }
triple_comment = { WHITESPACE* ~ "///" ~ doc_content }
double_comment = { WHITESPACE* ~ (!"///") ~ "//" ~ doc_content }
comment_block = ${ ((triple_comment | double_comment) ~ NEWLINE?)+ }
trailing_comment = ${ triple_comment | double_comment }

// #############
// expression
// #############
expression = { bool_literal | null_literal | numeric_literal | string_literal | call | pipeline | tuple_literal | array_literal | dictionary_literal | path | enum_choice }
